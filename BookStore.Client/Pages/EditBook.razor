@page "/create-book"
@page "/edit-book/{Id:int}"
@using BookStore.Client.Models
@using BookStore.Client.Services
@inject IBookService BookService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<h3>@(isEdit ? "Edit Book" : "Create Book")</h3>  

<EditForm Model="@book" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="book.Title" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="book.Price" />
    </div>
    <div class="form-group">
        <label for="category">Category</label>
        <InputSelect id="category" class="form-control" @bind-Value="book.CategoryId">
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Image:</label>
        <InputFile OnChange="HandleFileSelected" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
        [Parameter] public int? Id { get; set; }

    private Book book = new Book();
    private IBrowserFile? imageFile;
    private bool isEdit => Id.HasValue;
    private string? errorMessage;
    private List<Category> categories;

    protected override async Task OnInitializedAsync()
    {
        categories = (await CategoryService.GetCategoriesAsync()).ToList();

        if (!isEdit)
        {
            book = await BookService.GetProductById(Id.Value);
        }
    }
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var content = new MultipartFormDataContent();
            content.Add(new StringContent(book.Title), "Title");
            content.Add(new StringContent(book.Price.ToString()), "Price");

            if (imageFile != null)
            {
                var fileContent = new StreamContent(imageFile.OpenReadStream());
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(imageFile.ContentType);
                content.Add(fileContent, "ImageFile", imageFile.Name);
            }

            if (isEdit)
            {
                await BookService.UpdateProduct(book, content);
            }
            else
            {
                await BookService.AddProduct(book, content);
            }

            NavigationManager.NavigateTo("/books");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
